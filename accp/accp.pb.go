// Code generated by protoc-gen-go.
// source: accp.proto
// DO NOT EDIT!

/*
Package accp is a generated protocol buffer package.

It is generated from these files:
	accp.proto

It has these top-level messages:
	ACPackedMessage
*/
package accp

import proto "github.com/golang/protobuf/proto"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

//
// PROTOBUF WOULD NOW OUTPUT THE MESSAGE
// WE PROTECT THE MESSAGE FORMAT DIRECT BY FORCING ITS TYPING OUTPUTING PROTOBUF MESSAGES
// THE OVERHEAD DO NOT SEEMS BIGGER THAN A FEW BYTES...
//
// AC Message OLD Format:
// BASE64( 'AC' || 'NONCE_VALUE' || SECRETBOX( KEY, NONCE_AUTH, ZLIB( MSG ) )
//
// AC Message NEW Format:
// BASE64( 'AC' || 'OPTIONS' || 'NONCE_VALUE' || SECRETBOX( KEY, NONCE_AUTH, ZLIB( MSG ) )
//
// Nonce AUTH OLD Format:
// SHA3( Hash('CHANNEL') || ':' || Hash('SRC_NICK') || ':' || Hash('NONCE_VALUE') || ':' || Hash('HDR_RAW') )
//
// Nonce AUTH NEW Format:
// SHA3( SHA3('CHANNEL') || ':' || SHA3('SRC_NICK') || ':' || SHA3('NONCE_VALUE') || ':' || 'HDR_RAW=AC||OPTIONS||NONCE_VALUE' )
//
// KX (Key eXchange) Message Format:
// BASE64( 'KX' || 'NONCE_VALUE' || BOX( PEER_PUBKEY, ME_PRIVKEY, NONCE_AUTH, ZLIB( SECRET ) )
//
// Nonce AUTH Format:
// SHA3( 'CHANNEL' || ':' || 'MY_NICK' || ':' || 'PEER_NICK' || ':' || 'NONCE_VALUE' || ':' || 'HDR_RAW' )
//
//
type ACPackedMessage struct {
	Header           *uint32 `protobuf:"fixed32,1,req,name=header" json:"header,omitempty"`
	Nonce            *uint32 `protobuf:"varint,2,opt,name=nonce" json:"nonce,omitempty"`
	Ciphertext       []byte  `protobuf:"bytes,3,req,name=ciphertext" json:"ciphertext,omitempty"`
	Options          *uint32 `protobuf:"varint,4,opt,name=options" json:"options,omitempty"`
	Sigwho           []byte  `protobuf:"bytes,5,opt,name=sigwho" json:"sigwho,omitempty"`
	Sig              []byte  `protobuf:"bytes,6,opt,name=sig" json:"sig,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ACPackedMessage) Reset()         { *m = ACPackedMessage{} }
func (m *ACPackedMessage) String() string { return proto.CompactTextString(m) }
func (*ACPackedMessage) ProtoMessage()    {}

func (m *ACPackedMessage) GetHeader() uint32 {
	if m != nil && m.Header != nil {
		return *m.Header
	}
	return 0
}

func (m *ACPackedMessage) GetNonce() uint32 {
	if m != nil && m.Nonce != nil {
		return *m.Nonce
	}
	return 0
}

func (m *ACPackedMessage) GetCiphertext() []byte {
	if m != nil {
		return m.Ciphertext
	}
	return nil
}

func (m *ACPackedMessage) GetOptions() uint32 {
	if m != nil && m.Options != nil {
		return *m.Options
	}
	return 0
}

func (m *ACPackedMessage) GetSigwho() []byte {
	if m != nil {
		return m.Sigwho
	}
	return nil
}

func (m *ACPackedMessage) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

func init() {
}
