// Code generated by protoc-gen-go.
// source: accp.proto
// DO NOT EDIT!

/*
Package accp is a generated protocol buffer package.

It is generated from these files:
	accp.proto

It has these top-level messages:
	ACPackedMessage
*/
package accp

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

//
// PROTOBUF WOULD NOW OUTPUT THE MESSAGE
// WE PROTECT THE MESSAGE FORMAT DIRECT BY FORCING ITS TYPING OUTPUTING PROTOBUF MESSAGES
// THE OVERHEAD DO NOT SEEMS BIGGER THAN A FEW BYTES...
//
// AC Message OLD Format:
// BASE64( 'AC' || 'NONCE_VALUE' || SECRETBOX( KEY, NONCE_AUTH, ZLIB( MSG ) )
//
// AC Message NEW Format:
// BASE64( 'AC' || 'OPTIONS' || 'NONCE_VALUE' || SECRETBOX( KEY, NONCE_AUTH, ZLIB( MSG ) )
//
// Nonce AUTH OLD Format:
// SHA3( Hash('CHANNEL') || ':' || Hash('SRC_NICK') || ':' || Hash('NONCE_VALUE') || ':' || Hash('HDR_RAW') )
//
// Nonce AUTH NEW Format:
// SHA3( SHA3('CHANNEL') || ':' || SHA3('SRC_NICK') || ':' || SHA3('NONCE_VALUE') || ':' || 'HDR_RAW=AC||OPTIONS||NONCE_VALUE' )
//
// KX (Key eXchange) Message Format:
// BASE64( 'KX' || 'NONCE_VALUE' || BOX( PEER_PUBKEY, ME_PRIVKEY, NONCE_AUTH, ZLIB( SECRET ) )
//
// Nonce AUTH Format:
// SHA3( 'CHANNEL' || ':' || 'MY_NICK' || ':' || 'PEER_NICK' || ':' || 'NONCE_VALUE' || ':' || 'HDR_RAW' )
//
//
type ACPackedMessage struct {
	Header     uint32 `protobuf:"fixed32,1,opt,name=header" json:"header,omitempty"`
	Nonce      uint32 `protobuf:"varint,2,opt,name=nonce" json:"nonce,omitempty"`
	Ciphertext []byte `protobuf:"bytes,3,opt,name=ciphertext,proto3" json:"ciphertext,omitempty"`
	Options    uint32 `protobuf:"varint,4,opt,name=options" json:"options,omitempty"`
	Sigwho     []byte `protobuf:"bytes,5,opt,name=sigwho,proto3" json:"sigwho,omitempty"`
	Sig        []byte `protobuf:"bytes,6,opt,name=sig,proto3" json:"sig,omitempty"`
}

func (m *ACPackedMessage) Reset()                    { *m = ACPackedMessage{} }
func (m *ACPackedMessage) String() string            { return proto.CompactTextString(m) }
func (*ACPackedMessage) ProtoMessage()               {}
func (*ACPackedMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func init() {
	proto.RegisterType((*ACPackedMessage)(nil), "accp.ACPackedMessage")
}

func init() { proto.RegisterFile("accp.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 168 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0x4c, 0x4e, 0x2e,
	0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x01, 0xb1, 0x95, 0x16, 0x33, 0x72, 0xf1, 0x3b,
	0x3a, 0x07, 0x24, 0x26, 0x67, 0xa7, 0xa6, 0xf8, 0xa6, 0x16, 0x17, 0x27, 0xa6, 0xa7, 0x0a, 0x89,
	0x71, 0xb1, 0x65, 0xa4, 0x26, 0xa6, 0xa4, 0x16, 0x49, 0x30, 0x2a, 0x30, 0x6a, 0xb0, 0x07, 0x41,
	0x79, 0x42, 0x22, 0x5c, 0xac, 0x79, 0xf9, 0x79, 0xc9, 0xa9, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0xbc,
	0x41, 0x10, 0x8e, 0x90, 0x1c, 0x17, 0x57, 0x72, 0x66, 0x41, 0x46, 0x6a, 0x51, 0x49, 0x6a, 0x45,
	0x89, 0x04, 0xb3, 0x02, 0xa3, 0x06, 0x4f, 0x10, 0x92, 0x88, 0x90, 0x04, 0x17, 0x7b, 0x7e, 0x41,
	0x49, 0x66, 0x7e, 0x5e, 0xb1, 0x04, 0x0b, 0x58, 0x1f, 0x8c, 0x0b, 0xb2, 0xa7, 0x38, 0x33, 0xbd,
	0x3c, 0x23, 0x5f, 0x82, 0x15, 0xac, 0x0b, 0xca, 0x13, 0x12, 0xe0, 0x62, 0x2e, 0xce, 0x4c, 0x97,
	0x60, 0x03, 0x0b, 0x82, 0x98, 0x49, 0x6c, 0x60, 0x27, 0x1b, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff,
	0x17, 0xa2, 0x5d, 0x6f, 0xc0, 0x00, 0x00, 0x00,
}
